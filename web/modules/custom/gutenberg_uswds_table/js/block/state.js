/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildTable = buildTable;
exports.disableControls = disableControls;
exports.doDelete = doDelete;
exports.enterCellState = enterCellState;
exports.insertToTable = insertToTable;
function insertToTable(type, location, _ref, setAttributes) {
  var currentCell = _ref.currentCell,
    numRows = _ref.numRows,
    numCols = _ref.numCols,
    dataBody = _ref.dataBody,
    dataHead = _ref.dataHead;
  var selectedRow = currentCell.row;
  var selectedCol = currentCell.col;
  if (location === 'after') {
    selectedRow++;
    selectedCol++;
  }
  var endingRows = numRows;
  var allCols = numCols,
    endingCols = numCols;
  var newBody = JSON.parse(JSON.stringify(dataBody));
  var newHead = JSON.parse(JSON.stringify(dataHead));
  if (type === 'row') {
    var newRow = {
      bodyCells: []
    };
    for (var c = 0; c < allCols; c++) {
      newRow.bodyCells.push({
        content: ''
      });
    }
    newBody.splice(selectedRow, 0, newRow);
    endingRows++;
  } else if (type === 'col') {
    for (var r = 0; r < endingRows; r++) {
      var newCell = {
        content: ''
      };
      newBody[r].bodyCells.splice(selectedCol, 0, newCell);
    }
    var newTh = {
      content: ''
    };
    newHead.splice(selectedCol, 0, newTh);
    endingCols++;
  }
  setAttributes({
    dataBody: newBody,
    dataHead: newHead,
    numRows: endingRows,
    numCols: endingCols
  });
}
function doDelete(type, _ref2, setAttributes) {
  var currentCell = _ref2.currentCell,
    numRows = _ref2.numRows,
    numCols = _ref2.numCols,
    dataBody = _ref2.dataBody,
    dataHead = _ref2.dataHead;
  var selectedRow = currentCell.row,
    selectedCol = currentCell.col,
    endingRows = numRows,
    endingCols = numCols,
    newBody = JSON.parse(JSON.stringify(dataBody)),
    newHead = JSON.parse(JSON.stringify(dataHead));
  if (type === 'row') {
    newBody.splice(selectedRow, 1);
    endingRows--;
  } else if (type === 'col') {
    endingCols--;
    for (var r = 0; r < endingRows; r++) {
      newBody[r].bodyCells.splice(selectedCol, 1);
    }
    newHead.splice(selectedCol, 1);
  }
  setAttributes({
    dataBody: newBody,
    dataHead: newHead,
    numRows: endingRows,
    numCols: endingCols
  });
}
function enterCellState(evt, _ref3, setAttributes) {
  var buttonStates = _ref3.buttonStates;
  var buttonsToEnable = evt.target.dataset.buttons.split(',');
  var newButtonStates = {};
  for (var prop in buttonStates) {
    newButtonStates[prop] = true;
  }
  buttonsToEnable.forEach(function (button) {
    newButtonStates[button] = false;
  });
  var cellPos = evt.target.dataset.pos.split(',');
  setAttributes({
    buttonStates: newButtonStates,
    currentCell: {
      row: cellPos[0],
      col: cellPos[1]
    }
  });
}
function disableControls(_ref4, setAttributes) {
  var buttonStates = _ref4.buttonStates;
  var newButtonStates = {};
  for (var prop in buttonStates) {
    newButtonStates[prop] = true;
  }
  setAttributes({
    buttonStates: newButtonStates
  });
}
function splitQuotes(line) {
  if (line.indexOf('"') < 0) return line.split(',');
  var result = [],
    cell = '',
    quote = false;
  for (var i = 0; i < line.length; i++) {
    var char = line[i];
    if (char == '"' && line[i + 1] == '"') {
      cell += char;
      i++;
    } else if (char == '"') {
      quote = !quote;
    } else if (!quote && char == ',') {
      result.push(cell);
      cell = '';
    } else {
      cell += char;
    }
    if (i == line.length - 1 && cell) {
      result.push(cell);
    }
  }
  return result;
}
function buildTable(_ref5, setAttributes) {
  var numCols = _ref5.numCols,
    numRows = _ref5.numRows;
  if (numCols > 0 && numRows > 0) {
    var newHead = [];
    for (var i = 0; i < numCols; i++) {
      newHead[i] = {
        content: ''
      };
    }
    var newBody = [];
    for (var row = 0; row < numRows; row++) {
      var thisRow = {
        bodyCells: []
      };
      for (var col = 0; col < numCols; col++) {
        thisRow.bodyCells[col] = {
          content: ''
        };
      }
      newBody[row] = thisRow;
    }
    setAttributes({
      dataHead: newHead,
      dataBody: newBody,
      showTable: true
    });
  }
}