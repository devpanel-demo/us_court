/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _edit = _interopRequireDefault(require("./block/edit"));
var _save = _interopRequireDefault(require("./block/save"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var _wp = wp,
  blocks = _wp.blocks,
  data = _wp.data,
  element = _wp.element,
  components = _wp.components,
  editor = _wp.editor,
  blockEditor = _wp.blockEditor;
var registerBlockType = blocks.registerBlockType;
var dispatch = data.dispatch,
  select = data.select,
  useSelect = data.useSelect;
var Fragment = element.Fragment,
  useCallback = element.useCallback,
  useState = element.useState,
  useRef = element.useRef,
  useEffect = element.useEffect;
var Toolbar = components.Toolbar,
  Placeholder = components.Placeholder,
  ToggleControl = components.ToggleControl,
  PanelBody = components.PanelBody,
  TextareaControl = components.TextareaControl;
var RichText = blockEditor.RichText,
  AlignmentControl = blockEditor.AlignmentControl,
  InspectorControls = blockEditor.InspectorControls,
  BlockControls = blockEditor.BlockControls,
  BlockIcon = blockEditor.BlockIcon,
  TextControl = blockEditor.TextControl,
  InnerBlocks = blockEditor.InnerBlocks;
var __ = Drupal.t;
var table = {
  title: __('Table'),
  description: __('Table with theme variants'),
  icon: 'editor-table',
  attributes: {
    settings: {
      type: 'object'
    },
    buttonStates: {
      type: 'object',
      default: {
        intColBef: true,
        intColAft: true,
        intRowBef: true,
        intRowAft: true,
        delCol: true,
        delRow: true
      }
    },
    currentCell: {
      type: 'object',
      default: {
        row: '',
        col: ''
      }
    },
    dataBody: {
      type: 'array',
      source: 'query',
      default: [],
      selector: 'tbody tr',
      query: {
        bodyCells: {
          type: 'array',
          source: 'query',
          default: [],
          selector: 'td,th',
          query: {
            content: {
              type: 'string',
              source: 'html'
            }
          }
        }
      }
    },
    dataHead: {
      type: 'array',
      source: 'query',
      default: [],
      selector: 'th[scope="col"]',
      query: {
        content: {
          type: 'string',
          source: 'html'
        }
      }
    },
    showColHeadings: {
      type: 'boolean',
      default: false
    },
    useRowHeadings: {
      type: 'boolean',
      default: false
    },
    caption: {
      type: 'string',
      source: 'html',
      selector: 'caption'
    },
    showCaption: {
      type: 'boolean',
      default: false
    },
    numCols: {
      type: 'number',
      default: 3
    },
    numRows: {
      type: 'number',
      default: 2
    },
    showTable: {
      type: 'boolean',
      default: false
    },
    sortable: {
      type: 'boolean',
      default: false
    },
    searchable: {
      type: 'boolean',
      default: false
    },
    itemsPerPage: {
      type: 'number',
      default: 20
    },
    borderless: {
      type: 'boolean',
      default: false
    },
    striped: {
      type: 'boolean',
      default: false
    },
    fixedLayout: {
      type: 'boolean',
      default: false
    },
    tableId: {
      type: 'string'
    }
  },
  edit: _edit.default,
  save: _save.default
};
var category = {
  slug: 'uswds',
  title: __('USWDS')
};
var currentCategories = select('core/blocks').getCategories().filter(function (item) {
  return item.slug !== category.slug;
});
dispatch('core/blocks').setCategories([category].concat(_toConsumableArray(currentCategories)));
registerBlockType("".concat(category.slug, "/table"), _objectSpread({
  category: category.slug
}, table));