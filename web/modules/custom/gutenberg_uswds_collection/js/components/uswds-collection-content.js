/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(function (wp, $, Drupal, DrupalGutenberg, drupalSettings) {
  var element = wp.element,
      components = wp.components,
      blockEditor = wp.blockEditor;
  var Component = element.Component,
      Fragment = element.Fragment;
  var Placeholder = components.Placeholder,
      PanelBody = components.PanelBody,
      SelectControl = components.SelectControl,
      RangeControl = components.RangeControl;
  var InspectorControls = blockEditor.InspectorControls,
      BlockIcon = blockEditor.BlockIcon;
  var __ = Drupal.t;

  function getContent(_x) {
    return _getContent.apply(this, arguments);
  }

  function _getContent() {
    _getContent = _asyncToGenerator(regeneratorRuntime.mark(function _callee(item) {
      var viewMode,
          response,
          content,
          _args = arguments;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              viewMode = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'default';
              _context.next = 3;
              return fetch(Drupal.url("editor/content/load/".concat(item, "/").concat(viewMode)), {
                method: 'GET',
                headers: {
                  'Accept': 'application/json'
                }
              });

            case 3:
              response = _context.sent;
              _context.next = 6;
              return response.json();

            case 6:
              content = _context.sent;
              return _context.abrupt("return", content);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _getContent.apply(this, arguments);
  }

  function getLatestContent(_x2) {
    return _getLatestContent.apply(this, arguments);
  }

  function _getLatestContent() {
    _getLatestContent = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(items) {
      var viewMode,
          response,
          content,
          _args2 = arguments;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              viewMode = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 'default';
              _context2.next = 3;
              return fetch(Drupal.url("editor/content/loadmultiple/".concat(items, "/").concat(viewMode)), {
                method: 'GET',
                headers: {
                  'Accept': 'application/json'
                }
              });

            case 3:
              response = _context2.sent;
              _context2.next = 6;
              return response.json();

            case 6:
              content = _context2.sent;
              return _context2.abrupt("return", content);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _getLatestContent.apply(this, arguments);
  }

  function getLatestNodes(_x3, _x4) {
    return _getLatestNodes.apply(this, arguments);
  }

  function _getLatestNodes() {
    _getLatestNodes = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(bundle, items) {
      var response, content;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return fetch(Drupal.url("editor/latestcontent/load/".concat(bundle, "/").concat(items)), {
                method: 'GET',
                headers: {
                  'Accept': 'application/json'
                }
              });

            case 2:
              response = _context3.sent;
              _context3.next = 5;
              return response.json();

            case 5:
              content = _context3.sent;
              return _context3.abrupt("return", content);

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _getLatestNodes.apply(this, arguments);
  }

  function processHtml(html) {
    var node = document.createElement('div');
    node.innerHTML = html;
    var formElements = node.querySelectorAll('input, select, button, textarea, checkbox, radio');
    formElements.forEach(function (element) {
      element.setAttribute('readonly', true);
      element.setAttribute('required', false);
      element.setAttribute('disabled', true);
    });
    var linkElements = node.querySelectorAll('a');
    linkElements.forEach(function (element) {
      element.setAttribute('href', 'javascript:void(0)');
    });
    return node.innerHTML;
  }

  function hasEmptyContent(html) {
    var node = document.createElement('div');
    node.innerHTML = html;
    return node.innerText.trim() ? false : true;
  }

  var UswdsCollectionContent = function (_Component) {
    _inherits(UswdsCollectionContent, _Component);

    var _super = _createSuper(UswdsCollectionContent);

    function UswdsCollectionContent() {
      var _this;

      _classCallCheck(this, UswdsCollectionContent);

      _this = _super.apply(this, arguments);
      _this.state = {
        htmlList: [],
        activeSuggestion: 0,
        filteredSuggestions: [],
        showSuggestions: false,
        selectedElement: null,
        userInput: ""
      };
      var _this$props$attribute = _this.props.attributes,
          nodeIds = _this$props$attribute.nodeIds,
          viewMode = _this$props$attribute.viewMode,
          useLatest = _this$props$attribute.useLatest;

      if (nodeIds === null || nodeIds == undefined) {
        _this.props.setAttributes({
          nodeIds: []
        });

        nodeIds = [];
      }

      _this.loadContent();

      _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_this));
      _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
      _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));
      _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
      _this.clearContent = _this.clearContent.bind(_assertThisInitialized(_this));
      _this.renderNodes = _this.renderNodes.bind(_assertThisInitialized(_this));
      _this.renderLatestNodes = _this.renderLatestNodes.bind(_assertThisInitialized(_this));
      _this.loadContent = _this.loadContent.bind(_assertThisInitialized(_this));
      _this.selectItemForRemoval = _this.selectItemForRemoval.bind(_assertThisInitialized(_this));
      _this.removeItem = _this.removeItem.bind(_assertThisInitialized(_this));
      _this.moveItemUp = _this.moveItemUp.bind(_assertThisInitialized(_this));
      _this.moveItemDown = _this.moveItemDown.bind(_assertThisInitialized(_this));
      _this.addItem = _this.addItem.bind(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(UswdsCollectionContent, [{
      key: "renderLatestNodes",
      value: function renderLatestNodes(range) {
        var _this2 = this;

        getLatestNodes(this.props.contentType, range).then(function (nids) {
          _this2.props.setAttributes({
            nodeIds: nids
          });

          _this2.renderNodes(nids);
        });
      }
    }, {
      key: "loadContent",
      value: function loadContent() {
        var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.attributes.collectionRange;
        var nodeIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.attributes.nodeIds;
        var viewMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.props.attributes.viewMode;
        var useLatest = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.props.attributes.useLatest;

        if (nodeIds != null && nodeIds != undefined || useLatest == true) {
          if (useLatest == true) {
            this.renderLatestNodes(range);
          } else {
            this.renderNodes(nodeIds, viewMode);
          }
        }
      }
    }, {
      key: "renderNodes",
      value: function renderNodes() {
        var nodeIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.attributes.nodeIds;
        var viewMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.attributes.viewMode;

        var _SELF = this;

        getLatestContent(nodeIds.join(","), viewMode).then(function (content) {
          _SELF.setState({
            htmlList: content
          });
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var nodeIds = this.props.attributes.nodeIds;

        if (nodeIds) {
          var event = new CustomEvent('contentEmbedded', {
            detail: {
              contentType: this.props.contentType
            }
          });
          document.dispatchEvent(event);
        }
      }
    }, {
      key: "onChange",
      value: function onChange(event) {
        var _this3 = this;

        var contentType = this.props.contentType;
        var userInput = event.currentTarget.value;
        this.setState({
          userInput: userInput
        });

        if (userInput) {
          fetch('/editor/search-collection/' + contentType + '/' + userInput, {
            method: 'GET',
            headers: {
              'Accept': 'application/json'
            }
          }).then(function (response) {
            if (response.ok) {
              response.json().then(function (data) {
                _this3.setState({
                  activeSuggestion: 0,
                  filteredSuggestions: data,
                  showSuggestions: true,
                  userInput: userInput
                });
              });
            } else {
              console.log(response);
            }
          });
        } else {
          this.setState({
            activeSuggestion: 0,
            filteredSuggestions: [],
            showSuggestions: false,
            userInput: userInput
          });
        }
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        var _this4 = this;

        var nid = event.currentTarget.getAttribute('nid');
        var _this$props$attribute2 = this.props.attributes,
            nodeIds = _this$props$attribute2.nodeIds,
            viewMode = _this$props$attribute2.viewMode;

        if (nid) {
          var nodeLabel = event.currentTarget.innerText;
          var newArray = nodeIds;
          newArray.push(nid);
          this.props.setAttributes({
            nodeIds: newArray
          });
          getContent(nid, viewMode).then(function (content) {
            var newHtml = _this4.state.htmlList;
            newHtml.push(content);

            _this4.setState({
              userInput: "",
              htmlList: newHtml
            });

            var event = new CustomEvent('contentEmbedded', {
              detail: {
                contentType: _this4.props.contentType
              }
            });
            document.dispatchEvent(event);
          }).catch(function (r) {
            var newHtml = _this4.state.htmlList;
            newHtml.push(__('An error occured when loading the content.') + r);

            _this4.setState({
              htmlList: newHtml,
              userInput: nodeLabel
            });
          });
        }
      }
    }, {
      key: "onKeyDown",
      value: function onKeyDown(event) {
        var _this$state = this.state,
            activeSuggestion = _this$state.activeSuggestion,
            filteredSuggestions = _this$state.filteredSuggestions;

        if (event.keyCode === 13) {
          this.setState({
            activeSuggestion: 0,
            showSuggestions: false,
            userInput: filteredSuggestions[activeSuggestion]
          });
        } else if (event.keyCode === 38) {
          if (activeSuggestion === 0) {
            return;
          }

          this.setState({
            activeSuggestion: activeSuggestion - 1
          });
        } else if (event.keyCode === 40) {
          if (activeSuggestion - 1 === filteredSuggestions.length) {
            return;
          }

          this.setState({
            activeSuggestion: activeSuggestion + 1
          });
        }
      }
    }, {
      key: "onBlur",
      value: function onBlur(event) {
        var _this5 = this;

        var _this$state2 = this.state,
            activeSuggestion = _this$state2.activeSuggestion,
            filteredSuggestions = _this$state2.filteredSuggestions;
        setTimeout(function () {
          _this5.setState({
            showSuggestions: false,
            activeSuggestion: 0,
            userInput: ""
          });
        }, 500);
      }
    }, {
      key: "clearContent",
      value: function clearContent(event) {
        this.props.setAttributes({
          nodeIds: []
        });
        this.setState({
          htmlList: []
        });
      }
    }, {
      key: "removeItem",
      value: function removeItem() {
        if (this.state.selectedElement != null) {
          var id = this.state.selectedElement;
          var newList = this.state.htmlList.filter(function (_, index) {
            return index != id;
          });
          this.setState({
            htmlList: newList,
            selectedElement: null
          });
          var updatedIds = this.props.attributes.nodeIds.filter(function (_, index) {
            return index != id;
          });
          this.props.setAttributes({
            nodeIds: updatedIds
          });
        }
      }
    }, {
      key: "selectItemForRemoval",
      value: function selectItemForRemoval(id) {
        this.setState({
          selectedElement: id
        });
      }
    }, {
      key: "addItem",
      value: function addItem() {
        this.props.setAttributes({
          collectionRange: this.props.attributes.collectionRange + 1
        });
      }
    }, {
      key: "moveItemUp",
      value: function moveItemUp() {
        var index = this.state.selectedElement;
        index = +index;

        if (index > 0 && this.state.selectedElement != null) {
          var newHtmlList = this.state.htmlList;

          var _newHtmlList$splice = newHtmlList.splice(index, 1),
              _newHtmlList$splice2 = _slicedToArray(_newHtmlList$splice, 1),
              _element = _newHtmlList$splice2[0];

          newHtmlList.splice(index - 1, 0, _element);
          this.setState({
            htmlList: newHtmlList,
            selectedElement: index - 1
          });
          var newNodeslist = this.props.attributes.nodeIds;

          var _newNodeslist$splice = newNodeslist.splice(index, 1),
              _newNodeslist$splice2 = _slicedToArray(_newNodeslist$splice, 1),
              ele = _newNodeslist$splice2[0];

          newNodeslist.splice(index - 1, 0, ele);
          this.props.setAttributes({
            nodeIds: newNodeslist
          });
        }
      }
    }, {
      key: "moveItemDown",
      value: function moveItemDown() {
        var index = this.state.selectedElement;
        index = +index;
        var newHtmlList = this.state.htmlList;
        var newNodeslist = this.props.attributes.nodeIds;

        if (index < newNodeslist.length - 1 && this.state.selectedElement != null && newHtmlList) {
          var _newHtmlList$splice3 = newHtmlList.splice(index, 1),
              _newHtmlList$splice4 = _slicedToArray(_newHtmlList$splice3, 1),
              _element2 = _newHtmlList$splice4[0];

          newHtmlList.splice(index + 1, 0, _element2);
          this.setState({
            htmlList: newHtmlList,
            selectedElement: index + 1
          });

          var _newNodeslist$splice3 = newNodeslist.splice(index, 1),
              _newNodeslist$splice4 = _slicedToArray(_newNodeslist$splice3, 1),
              ele = _newNodeslist$splice4[0];

          newNodeslist.splice(index + 1, 0, ele);
          this.props.setAttributes({
            nodeIds: newNodeslist
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this6 = this;

        var onChange = this.onChange,
            onBlur = this.onBlur,
            onClick = this.onClick,
            onKeyDown = this.onKeyDown,
            clearContent = this.clearContent,
            selectItemForRemoval = this.selectItemForRemoval,
            removeItem = this.removeItem,
            addItem = this.addItem,
            moveItemUp = this.moveItemUp,
            moveItemDown = this.moveItemDown,
            _this$state3 = this.state,
            htmlList = _this$state3.htmlList,
            activeSuggestion = _this$state3.activeSuggestion,
            filteredSuggestions = _this$state3.filteredSuggestions,
            showSuggestions = _this$state3.showSuggestions,
            userInput = _this$state3.userInput,
            selectedElement = _this$state3.selectedElement;
        var _this$props = this.props,
            className = _this$props.className,
            viewModes = _this$props.viewModes,
            attributes = _this$props.attributes,
            setAttributes = _this$props.setAttributes,
            contentTypeLabel = _this$props.contentTypeLabel,
            isSelected = _this$props.isSelected;

        if (attributes.nodeIds === undefined) {
          attributes.nodeIds = [];
        }

        var suggestionsListComponent;

        if (showSuggestions && userInput) {
          if (filteredSuggestions.length) {
            suggestionsListComponent = React.createElement("ul", {
              class: "suggestions"
            }, filteredSuggestions.map(function (suggestion, index) {
              var className;

              if (index === activeSuggestion) {
                className = "suggestion-active";
              }

              return React.createElement("li", {
                className: className,
                key: suggestion.id,
                nid: suggestion.id,
                onClick: onClick
              }, suggestion.title);
            }));
          } else {
            suggestionsListComponent = React.createElement("div", {
              class: "no-suggestions"
            }, React.createElement("em", null, "No suggestions available."));
          }
        }

        var viewModesOptions = [];

        for (var viewModeId in viewModes) {
          if (Object.hasOwnProperty.call(viewModes, viewModeId)) {
            var viewModeLabel = viewModes[viewModeId];
            viewModesOptions.push({
              value: viewModeId,
              label: viewModeLabel
            });
          }
        }

        var collectionTypeClass = "usa-collection ";
        collectionTypeClass += "view-mode--" + attributes.viewMode;
        return React.createElement(Fragment, null, React.createElement(Fragment, null, React.createElement(InspectorControls, null, React.createElement(Fragment, null, React.createElement(PanelBody, {
          title: __('Collection Settings'),
          initialOpen: true
        }, React.createElement(SelectControl, {
          label: __('View mode'),
          value: attributes.viewMode,
          options: viewModesOptions,
          onChange: function onChange(newViewMode) {
            setAttributes({
              viewMode: newViewMode
            });

            if (attributes.nodeIds.length > 0) {
              _this6.loadContent(attributes.collectionRange, attributes.nodeIds, newViewMode);
            }

            var event = new CustomEvent('changedViewMode', {
              detail: {
                contentType: _this6.props.contentType,
                viewMode: newViewMode
              }
            });
            document.dispatchEvent(event);
          }
        }), React.createElement(RangeControl, {
          value: attributes.collectionRange,
          onChange: function onChange(width) {
            setAttributes({
              collectionRange: width
            });

            _this6.loadContent(width);
          },
          min: 1,
          max: 20,
          step: 1
        }), React.createElement(ToggleControl, {
          label: __('Use latest nodes'),
          checked: attributes.useLatest,
          onChange: function onChange(newUse) {
            setAttributes({
              useLatest: !attributes.useLatest
            });

            _this6.loadContent(attributes.collectionRange, attributes.nodeIds, attributes.viewMode, !attributes.useLatest);
          }
        })))), React.createElement(BlockControls, null, selectedElement != null ? React.createElement(Toolbar, {
          controls: [{
            icon: 'redo',
            title: __('Clear content'),
            onClick: clearContent
          }, {
            icon: 'no',
            title: __('Remove item'),
            onClick: removeItem
          }, {
            icon: 'arrow-up-alt',
            title: __('Move Up'),
            onClick: moveItemUp
          }, {
            icon: 'arrow-down-alt',
            title: __('Move down'),
            onClick: moveItemDown
          }]
        }) : React.createElement(Toolbar, {
          controls: [{
            icon: 'redo',
            title: __('Clear content'),
            onClick: clearContent
          }]
        }))), attributes.viewMode == 'featured' || attributes.viewMode == 'section_landing' ? React.createElement("div", {
          class: collectionTypeClass
        }, Object.entries(htmlList).map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              item = _ref2[1];

          return React.createElement("div", {
            key: key,
            dangerouslySetInnerHTML: {
              __html: processHtml(item)
            },
            onClick: function onClick() {
              return _this6.selectItemForRemoval(key);
            },
            className: selectedElement == key && isSelected ? 'selected__element' : 'unselected__element'
          });
        })) : React.createElement("ul", {
          class: collectionTypeClass
        }, Object.entries(htmlList).map(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              key = _ref4[0],
              item = _ref4[1];

          return React.createElement("div", {
            key: key,
            dangerouslySetInnerHTML: {
              __html: processHtml(item)
            },
            onClick: function onClick() {
              return _this6.selectItemForRemoval(key);
            },
            className: selectedElement == key && isSelected ? 'selected__element' : 'unselected__element'
          });
        })), attributes.nodeIds.length < attributes.collectionRange && isSelected && React.createElement(Fragment, null, React.createElement(Placeholder, {
          icon: React.createElement(BlockIcon, {
            icon: "media-document"
          }),
          label: __('Content :') + contentTypeLabel,
          instructions: __('Start typing to find the content you want to embed.'),
          className: "content-embed-autocomplete"
        }, React.createElement("input", {
          type: "text",
          onChange: onChange,
          onKeyDown: onKeyDown,
          onBlur: onBlur,
          placeholder: __('Search for content...')
        }), suggestionsListComponent)), isSelected && attributes.nodeIds.length == attributes.collectionRange && attributes.nodeIds.length < 20 && React.createElement(Button, {
          onClick: addItem,
          className: "button button-large"
        }, __('Add collection item')));
      }
    }]);

    return UswdsCollectionContent;
  }(Component);

  window.DrupalGutenberg = window.DrupalGutenberg || {};
  window.DrupalGutenberg.Components = window.DrupalGutenberg.Components || {};
  window.DrupalGutenberg.Components.UswdsCollectionContent = UswdsCollectionContent;
})(wp, jQuery, Drupal, DrupalGutenberg, drupalSettings);