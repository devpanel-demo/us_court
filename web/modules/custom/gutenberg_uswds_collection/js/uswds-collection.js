/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function (wp, Drupal, drupalSettings) {
  var data = wp.data,
      blocks = wp.blocks,
      blockEditor = wp.blockEditor;
  var Fragment = wp.element.Fragment;
  var UswdsCollectionContent = window.DrupalGutenberg.Components.UswdsCollectionContent;
  var allowedContentTypes = drupalSettings.gutenbergCollectionEmbed.allowed;

  function registerBlock(id, label, viewmodes, widthControl) {
    var blockId = "uswdscollection/".concat(id.replace(/_/g, "-"));
    blocks.registerBlockType(blockId, {
      title: Drupal.t('Collection') + ': ' + label,
      icon: 'index-card',
      category: 'uswdscollection',
      supports: {
        align: true,
        html: false,
        reusable: true
      },
      attributes: {
        nodeIds: {
          type: 'array'
        },
        viewMode: {
          type: 'string',
          default: false
        },
        collectionRange: {
          type: 'number',
          default: 1
        },
        useLatest: {
          type: 'boolean',
          default: false
        }
      },
      edit: function edit(_ref) {
        var attributes = _ref.attributes,
            className = _ref.className,
            setAttributes = _ref.setAttributes,
            isSelected = _ref.isSelected;
        var viewMode = attributes.viewMode;

        if (viewMode == false) {
          setAttributes({
            viewMode: Object.keys(viewmodes)[0]
          });
        }

        return React.createElement(UswdsCollectionContent, {
          attributes: attributes,
          className: className + ' gutenberg-content-embed',
          contentType: id,
          contentTypeLabel: label,
          setAttributes: setAttributes,
          viewModes: viewmodes,
          isSelected: isSelected
        });
      },
      save: function save() {
        return null;
      }
    });
  }

  function registerDrupalContent() {
    var category = {
      slug: 'uswdscollection',
      title: Drupal.t('USWDS Collection')
    };
    var categories = [].concat(_toConsumableArray(data.select('core/blocks').getCategories()), [category]);
    data.dispatch('core/blocks').setCategories(categories);

    if (drupalSettings.gutenbergCollectionEmbed.allowed !== undefined) {
      for (var key in allowedContentTypes) {
        if (Object.hasOwnProperty.call(allowedContentTypes, key)) {
          var viewmodes = allowedContentTypes[key]['viewModes'];
          var label = allowedContentTypes[key]['label'];
          registerBlock(key, label, viewmodes);
        }
      }
    }
  }

  registerDrupalContent();
})(wp, Drupal, drupalSettings);